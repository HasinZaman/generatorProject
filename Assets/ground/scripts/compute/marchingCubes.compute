// Each #kernel tells which function to compile; you can have many kernels
//#pragma kernel generateNodes
#pragma kernel getVerticesLerp
#pragma kernel getVertices

#include <marchingCubeTables.compute>

//declaring variables required to generate mesh
struct Triangle
{
    float3 id;
    float3 p2;
    float3 p3;
};

StructuredBuffer<float> nodes;
float threshold = 0;
int3 dim;
float3 distPerNode = { 1, 1, 1 };

AppendStructuredBuffer<Triangle> triangles;

float lerp(float x1, float x2, float t)
{
	return (t - x1) / (x2 - x1);
}

[numthreads(10, 10, 10)]
void getVerticesLerp(uint3 id : SV_DispatchThreadID)
{
    //checks if cube exists
    if (id.x + 1 >= dim.x || id.y + 1 >= dim.y || id.z + 1 >= dim.z)
	{
		return;
	}
    
    //declaring variables
    int index = 0;
    float3 vertice;
    
    Triangle temp;
    int pointInt = 1;
    
    
	float verticesTemp[8] = 
	{
        nodes.Load(id.x + (id.y + id.z * dim.y) * dim.x),
		nodes.Load((id.x + 1) + (id.y + id.z * dim.y) * dim.x),
		nodes.Load((id.x + 1) + (id.y + (id.z + 1) * dim.y) * dim.x),
        nodes.Load((id.x) + (id.y + (id.z + 1) * dim.y) * dim.x),
        
		nodes.Load(id.x + (id.y + 1 + (id.z) * dim.y) * dim.x),
		nodes.Load((id.x + 1) + (id.y + 1 + (id.z) * dim.y) * dim.x),
		nodes.Load((id.x + 1) + (id.y + 1 + (id.z + 1) * dim.y) * dim.x),
        nodes.Load(id.x + (id.y + 1 + (id.z + 1) * dim.y) * dim.x)
    };
    
    //finding index of cube based on active points
	
    //finding index of cube based on active points
    for (int i1 = 0; i1 < 8; i1++)
    {
        if (verticesTemp[i1] <= -3.402823466e+38F + 10)
        {
            return;
        }
        index += (verticesTemp[i1] > threshold) * pow(2, i1);
    }

    //for loop adds and lerps all points
	for(int i2 = 0; i2 < triTableLengths[index]; i2++)
	{
        vertice = points[triTable[index][i2]];

		if (vertice.x == 0.5)
		{
			vertice.x = lerp(
				nodes.Load(id.x + (id.y + vertice.y + (id.z + vertice.z) * dim.y) * dim.x),
				nodes.Load((id.x + 1) + (id.y + vertice.y + (id.z + vertice.z) * dim.y) * dim.x),
				threshold);
		}
		if (vertice.y == 0.5)
		{
            vertice.y = lerp(
				nodes.Load(id.x + vertice.x + (id.y + (id.z + vertice.z) * dim.y) * dim.x),
				nodes.Load(id.x + vertice.x + (id.y + 1 + (id.z + vertice.z) * dim.y) * dim.x),
				threshold);
        }
		if (vertice.z == 0.5)
        {
            vertice.z = lerp(
				nodes.Load(id.x + vertice.x + (id.y + vertice.y + id.z * dim.y) * dim.x),
				nodes.Load(id.x + vertice.x + (id.y + vertice.y + (id.z + 1) * dim.y) * dim.x),
				threshold);
        }

        vertice.x = (vertice.x + id.x) * distPerNode.x;
        vertice.y = (vertice.y + id.y) * distPerNode.y;
        vertice.z = (vertice.z + id.z) * distPerNode.z;
		
        switch (pointInt)
        {
            case 1:
                temp.id = vertice;
                pointInt = 2;
                break;
            case 2:
                temp.p2 = vertice;
                pointInt = 3;
                break;
            case 3:
                temp.p3 = vertice;
                triangles.Append(temp);
                pointInt = 1;
                break;
        }

    }
}

[numthreads(10, 10, 10)]
void getVertices(uint3 id : SV_DispatchThreadID)
{
    //checks if cube exists
    if (id.x + 1 >= dim.x || id.y + 1 >= dim.y || id.z + 1 >= dim.z)
    {
        return;
    }
    
    //declaring variables
    int index = 0;
    float3 vertice;
    
    Triangle temp;
    int pointInt = 1;
    
    
    float verticesTemp[8] =
    {
        nodes.Load(id.x + (id.y + id.z * dim.y) * dim.x),
		nodes.Load((id.x + 1) + (id.y + id.z * dim.y) * dim.x),
		nodes.Load((id.x + 1) + (id.y + (id.z + 1) * dim.y) * dim.x),
        nodes.Load((id.x) + (id.y + (id.z + 1) * dim.y) * dim.x),
        
		nodes.Load(id.x + (id.y + 1 + (id.z) * dim.y) * dim.x),
		nodes.Load((id.x + 1) + (id.y + 1 + (id.z) * dim.y) * dim.x),
		nodes.Load((id.x + 1) + (id.y + 1 + (id.z + 1) * dim.y) * dim.x),
        nodes.Load(id.x + (id.y + 1 + (id.z + 1) * dim.y) * dim.x)
    };
    
    //finding index of cube based on active points
    for (int i1 = 0; i1 < 8; i1++)
    {
        if (verticesTemp[i1] <= -3.402823466e+38F + 10)
        {
            return;
        }
        index += (verticesTemp[i1] > threshold) * pow(2, i1);
    }

    //for loop adds and lerps all points
    for (int i2 = 0; i2 < triTableLengths[index]; i2++)
    {
        vertice = points[triTable[index][i2]];

        vertice.x = (vertice.x + id.x) * distPerNode.x;
        vertice.y = (vertice.y + id.y) * distPerNode.y;
        vertice.z = (vertice.z + id.z) * distPerNode.z;
		
        switch (pointInt)
        {
            case 1:
                temp.id = vertice;
                pointInt = 2;
                break;
            case 2:
                temp.p2 = vertice;
                pointInt = 3;
                break;
            case 3:
                temp.p3 = vertice;
                triangles.Append(temp);
                pointInt = 1;
                break;
        }

    }
}

[numthreads(5, 5, 5)]
void generateNodes(uint3 id : SV_DispatchThreadID)
{

}
